syntax = "proto3";
package raft;

option java_package = "rpc";
option java_outer_classname = "RaftProto";

import "google/protobuf/any.proto";

service RaftRPC {
  // The AppendEntries RPC defined in Figure 2
  rpc appendEntries(AppendRequest) returns (AppendResponse) {}
  // The RequestVote RPC defined in Figure 2
  rpc requestVote(VoteRequest) returns (VoteResponse) {}
}

// This RPC service only represents the redirection of commands from raft node to raft node.
// Note that it doesn't represent the redirection of commands from client to raft node or to raft cluster.
service CommandRedirect {
  rpc redirectCommand(RedirectRequest) returns (RedirectResponse) {}
}



/* This is the message for the log entry. As the system only supports put and get
* operations, hence it's defined in the Action. Moreover, we support multi-type key and value.
* Hence we use the Any as type to represent multi-type.
* For detailed info about any type, search on this page: https://protobuf.dev/programming-guides/proto3/#adding-more-message-types
*/
enum Action {
  PUT = 0;
  GET = 1;
}

message Command {
  Action action = 1;
  string key = 2;
  // If it's a get message, then no value should be attached.
  int32 value = 3;
}

message Entry {
  Command command = 1;
  int32 value = 2;
  int32 term = 3;
  int32 index = 4;
  bool isCommitted = 5;
}

message MetaData {
  int32 currentTerm = 1;
  int32 votedFor = 2;
}


message AppendRequest {
  // leader's term
  int32 term = 1;

  // leader ID
  int32 leaderID = 2;

  // index of log entry immediately preceding new ones
  int32 prevLogIndex = 3;

  // term of prevLogIndex entry
  int32 prevLogTerm = 4;

  // log entries to store (empty for heartbeat, may send more than one for efficiency)
  // Use repeated here to make it into a dynamically sized array (from 0 to inf) of entries.
  repeated Entry entries = 5;

  // leader's commitIndex
  int32 leaderCommit = 6;
}

message AppendResponse {
  // currentTerm, for leader to update itself.
  int32 term = 1;

  // true if follower contained entry matching prevLogIndex and prevLogTerm
  bool success = 2;
}

message VoteRequest {
  // candidate's term
  int32 term = 1;

  // candidate requesting vote
  int32 candidateID = 2;

  // index of candidate's last log entry.
  int32 lastLogIndex = 3;

  // term of candidate's last log entry.
  int32 lastLogTerm = 4;
}

message VoteResponse {
  // currentTerm, for candidate to update itself.
  int32 term = 1;

  // true means candidate receives vote.
  bool voteGranted = 2;
}

message RedirectRequest {
  Command command = 1;
}

message RedirectResponse {
  bool success = 1;
  Command command = 2;
}
